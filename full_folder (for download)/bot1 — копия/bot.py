import telebot
from telebot import types
import sqlite3

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot('7000409399:AAG1xPV4drfoPwEtZi9v8p8wmTilXI2Js64')  

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
def connect_db():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î SQLite."""
    conn = sqlite3.connect('database1') 
    return conn

user_selection = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Ä—Ö—ñ–≤ üîÇ')
    btn2 = types.KeyboardButton('–î–æ–ø–æ–º–æ–≥–∞ ‚ÅâÔ∏è')
    btn3 = types.KeyboardButton('–û–±—Ä–∞—Ç–∏ –¢–ó üóÇ')
    markup.row(btn3, btn2)
    markup.add(btn1)

    bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é, {message.from_user.first_name}. \n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ "–ó–≤–µ—Ä–Ω–∏ –¢–ó"
@bot.message_handler(func=lambda message: message.text == '–û–±—Ä–∞—Ç–∏ –¢–ó üóÇ')
def select_tz(message):
    markup = types.InlineKeyboardMarkup()
    btn_add = types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏', callback_data='add_data')
    btn_delete = types.InlineKeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏', callback_data='delete_data')
    markup.add(btn_add, btn_delete)

    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏"
@bot.callback_query_handler(func=lambda call: call.data == 'add_data')
def handle_add_data(call):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for table in tables:
        table_name = table[0]
        btn = types.InlineKeyboardButton(table_name, callback_data=f"table|{table_name}")
        markup.add(btn)

    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é –¢–ó –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
@bot.callback_query_handler(func=lambda call: call.data.startswith("table"))
def handle_table(call):
    table_name = call.data.split('|')[1]
    user_selection[call.message.chat.id] = {'table': table_name, 'columns': []}

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name});")
    columns = [col[1] for col in cursor.fetchall()]
    conn.close()

    markup = types.InlineKeyboardMarkup()

    for col in columns:
        if col not in ['–î–∞—Ç–∞', '–ü—Ä–æ–±—ñ–≥_(–∫–º)']:
            if col in user_selection[call.message.chat.id]['columns']:
                btn = types.InlineKeyboardButton(f"‚úÖ {col}", callback_data=f"col|{col}")
            else:
                btn = types.InlineKeyboardButton(f"‚¨ú {col}", callback_data=f"col|{col}")
            markup.add(btn)

    markup.add(types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_columns"))
    bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—ó:", 
                          chat_id=call.message.chat.id, 
                          message_id=call.message.message_id, 
                          reply_markup=markup)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("col"))
def toggle_column(call):
    column_name = call.data.split('|')[1]
    user_data = user_selection[call.message.chat.id]
    columns = user_data['columns']

    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏–±–æ—Ä—É
    if column_name in columns:
        columns.remove(column_name)
    else:
        columns.append(column_name)

    markup = types.InlineKeyboardMarkup()
    for col in columns:
        btn = types.InlineKeyboardButton(f"‚úÖ {col}", callback_data=f"col|{col}")
        markup.add(btn)

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({user_data['table']});")
    columns_list = [col[1] for col in cursor.fetchall()]
    conn.close()

    for col in columns_list:
        if col not in columns and col not in ['–î–∞—Ç–∞', '–ü—Ä–æ–±—ñ–≥_(–∫–º)']:
            btn = types.InlineKeyboardButton(f"‚¨ú {col}", callback_data=f"col|{col}")
            markup.add(btn)

    markup.add(types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_columns"))
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
@bot.callback_query_handler(func=lambda call: call.data == "confirm_columns")
def confirm_columns(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†):")
    bot.register_next_step_handler(call.message, get_date)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏
def get_date(message):
    user_selection[message.chat.id]['date'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–±—ñ–≥ (–∫–º):")
    bot.register_next_step_handler(message, get_mileage)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–±—ñ–≥—É
def get_mileage(message):
    user_selection[message.chat.id]['mileage'] = message.text
    save_data(message)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –ë–î
def save_data(message):
    try:
        user_data = user_selection.pop(message.chat.id)
        table_name = user_data['table']
        selected_columns = user_data['columns']
        date = user_data['date']
        mileage = user_data['mileage']

        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute(f"SELECT * FROM `{table_name}` WHERE `–î–∞—Ç–∞` = ? AND `–ü—Ä–æ–±—ñ–≥_(–∫–º)` = ?", (date, mileage))
        existing_row = cursor.fetchone()

        if existing_row:
            for col in selected_columns:
                cursor.execute(f"UPDATE `{table_name}` SET `{col}` = '+' WHERE `–î–∞—Ç–∞` = ? AND `–ü—Ä–æ–±—ñ–≥_(–∫–º)` = ?", (date, mileage))
        else:
            cursor.execute(f"INSERT INTO `{table_name}` (`–î–∞—Ç–∞`, `–ü—Ä–æ–±—ñ–≥_(–∫–º)`) VALUES (?, ?)", (date, mileage))
            for col in selected_columns:
                cursor.execute(f"UPDATE `{table_name}` SET `{col}` = '+' WHERE `–î–∞—Ç–∞` = ? AND `–ü—Ä–æ–±—ñ–≥_(–∫–º)` = ?", (date, mileage))

        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

user_selection = {}

user_selection = {}

# –û–±—Ä–æ–±–Ω–∏–∫ "–í–∏–¥–∞–ª–∏—Ç–∏"
@bot.callback_query_handler(func=lambda call: call.data == 'delete_data')
def handle_delete_data(call):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for table in tables:
        table_name = table[0]
        btn = types.InlineKeyboardButton(table_name, callback_data=f"delete_table|{table_name}")
        markup.add(btn)

    bot.edit_message_text("‚ö†Ô∏è–£–í–ê–ì–ê‚ö†Ô∏è \n –í–ò–î–ê–õ–Ø–¢–ò –í–ê–†–¢–û –õ–ò–®–ï –¢–û–î–Ü, –Ø–ö–©–û –ü–†–ò –ó–ê–ü–ò–°–Ü –ë–£–õ–ò –ó–ê–ó–ù–ê–ß–ï–ù–Ü –ù–ï–ö–û–†–ï–ö–¢–ù–Ü –î–ê–ù–Ü  \n\n –û–±–µ—Ä—ñ—Ç—å –¢–ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_table"))
def select_table_for_deletion(call):
    table_name = call.data.split('|')[1]
    user_selection[call.message.chat.id] = {'table': table_name}

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(f"SELECT DISTINCT –î–∞—Ç–∞ FROM {table_name} ORDER BY –î–∞—Ç–∞ ASC;")
    dates = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for date in dates:
        btn = types.InlineKeyboardButton(date[0], callback_data=f"select_date_to_delete|{date[0]}|{table_name}")
        markup.add(btn)

    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_date_to_delete"))
def select_date_for_deletion(call):
    date, table_name = call.data.split('|')[1], call.data.split('|')[2]
    user_selection[call.message.chat.id]['date'] = date
    user_selection[call.message.chat.id]['table'] = table_name

    conn = connect_db()
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
    cursor.execute(f"SELECT * FROM {table_name} WHERE –î–∞—Ç–∞ = ?", (date,))
    rows = cursor.fetchall()
    cursor.execute(f"PRAGMA table_info({table_name});")
    columns = [col[1] for col in cursor.fetchall()]
    conn.close()

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥—ñ—ó
    result = f"–¢–∞–±–ª–∏—Ü—è: {table_name}\n\n–î–∞—Ç–∞: {date}\n"
    for row in rows:
        mileage = row[columns.index('–ü—Ä–æ–±—ñ–≥_(–∫–º)')]  # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
        result += f"–ü—Ä–æ–±—ñ–≥: {mileage} –∫–º\n"
        result += "\n–î—ñ—ó:\n"
        result += "\n".join(columns[i] for i in range(len(row)) if row[i] == '+')  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        result += "\n\n"

    bot.send_message(call.message.chat.id, result)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    markup = types.InlineKeyboardMarkup()
    btn_delete = types.InlineKeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f"confirm_delete|{table_name}|{date}")
    btn_back = types.InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å', callback_data="back_to_main_menu")
    markup.add(btn_delete, btn_back)

    bot.send_message(call.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete"))
def confirm_delete(call):
    table_name, date = call.data.split('|')[1], call.data.split('|')[2]
    
    conn = connect_db()
    cursor = conn.cursor()

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    cursor.execute(f"DELETE FROM `{table_name}` WHERE `–î–∞—Ç–∞` = ?", (date,))
    conn.commit()
    conn.close()

    bot.send_message(call.message.chat.id, "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –¥—ñ—ó
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main_menu")
def back_to_main_menu(call):
    markup = types.InlineKeyboardMarkup()
    btn_add = types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏', callback_data='add_data')
    btn_delete = types.InlineKeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏', callback_data='delete_data')
    markup.add(btn_add, btn_delete)

    bot.send_message(call.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=markup)



    # –û–±—Ä–æ–±–Ω–∏–∫ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Ä—Ö—ñ–≤"
@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Ä—Ö—ñ–≤ üîÇ')
def view_archive(message):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for table in tables:
        table_name = table[0]
        btn = types.InlineKeyboardButton(table_name, callback_data=f"archive_table|{table_name}")
        markup.add(btn)

    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¢–ó –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞—Ä—Ö—ñ–≤—É:", reply_markup=markup)

# –í–∏–±—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞—Ä—Ö—ñ–≤—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("archive_table"))
def select_archive_table(call):
    table_name = call.data.split('|')[1]
    user_selection[call.message.chat.id] = {'table': table_name}

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(f"SELECT DISTINCT –î–∞—Ç–∞ FROM {table_name} ORDER BY –î–∞—Ç–∞ ASC;")
    dates = cursor.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for date in dates:
        btn = types.InlineKeyboardButton(date[0], callback_data=f"archive_date|{table_name}|{date[0]}")
        markup.add(btn)

    bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑ –∞—Ä—Ö—ñ–≤—É:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

# –í–∏–±—ñ—Ä –¥–∞—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞—Ä—Ö—ñ–≤—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("archive_date"))
def select_archive_date(call):
    _, table_name, date = call.data.split('|')
    conn = connect_db()
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
    cursor.execute(f"SELECT * FROM {table_name} WHERE –î–∞—Ç–∞ = ?", (date,))
    rows = cursor.fetchall()
    cursor.execute(f"PRAGMA table_info({table_name});")
    columns = [col[1] for col in cursor.fetchall()]
    conn.close()

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –¥–∞–Ω–∏–º–∏
    result = f"{table_name}\n \n–î–∞—Ç–∞: {date}\n"
    for row in rows:
        mileage = row[columns.index('–ü—Ä–æ–±—ñ–≥_(–∫–º)')]  
        result += f"–ü—Ä–æ–±—ñ–≥: {mileage} –∫–º\n"
        result += "\n–î—ñ—ó:\n"
        result += "\n".join(columns[i] for i in range(len(row)) if row[i] == '+') 
        result += "\n\n"

    bot.send_message(call.message.chat.id, result if rows else "–î–∞–Ω—ñ –∑–∞ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–º–æ–≥–∞ ‚ÅâÔ∏è"
@bot.message_handler(func=lambda message: message.text == '–î–æ–ø–æ–º–æ–≥–∞ ‚ÅâÔ∏è')
def send_help(message):
    try:
        help_text = """
<b>–Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ù–ù–Ø</b>

<b>–í–∏–±—ñ—Ä –¢–ó:</b>
1. –ö–ª—ñ–∫ –Ω–∞ ¬´–û–±—Ä–∞—Ç–∏ –¢–ó¬ª  
2. –Ü–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –æ–±–∏—Ä–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¢–ó –∑–∞ –¥–µ—Ä–∂ –Ω–æ–º–µ—Ä–æ–º  
3. –û–±–∏—Ä–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –±–∞–∑–∏ —Ä–æ–±—ñ—Ç  
4. –í–Ω–æ—Å–∏–º–æ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–±—ñ—Ç  
5. –í–Ω–æ—Å–∏–º–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –æ–¥–æ–º–µ—Ç—Ä–∞ (–ø—Ä–æ–±—ñ–≥ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç)  
6. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–Ω–µ—Å–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é  

<b>–†–æ–±–æ—Ç–∞ –∑ –∞—Ä—Ö—ñ–≤–æ–º:</b>
1. –ö–ª—ñ–∫ –Ω–∞ ¬´–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Ä—Ö—ñ–≤¬ª  
2. –Ü–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –æ–±–∏—Ä–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¢–ó –∑–∞ –¥–µ—Ä–∂ –Ω–æ–º–µ—Ä–æ–º  
3. –û–±–∏—Ä–∞—î–º–æ –¥–∞—Ç—É –Ω–∞ —è–∫—É –Ω–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è  
4. –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        bot.send_message(message.chat.id, help_text, parse_mode="HTML")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–æ–ø–æ–º–æ–≥–∏: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(non_stop=True)




